@startuml

title Diagrama de classes UML do Simulador de Hidrometro

skinparam {
    ' Fonte utilizada no diagrama
    DefaultFontName "Segoe UI, Arial"
    DefaultFontSize 12
    
    ' Desativa a aparência de "desenho à mão"
    handwritten false
    
    ' Adiciona sombra aos elementos para dar profundidade
    shadowing true
    
    ' --- Configuração das Classes ---
    class {
        ' Cores
        BackgroundColor #F8F9FA
        BorderColor #495057
        BorderThickness 2

        FontName "Segoe UI, Arial"
        FontColor #212529
        FontSize 12

        HeaderBackgroundColor #DDE8F3
        HeaderFontColor #212529
        HeaderFontSize 14
        HeaderFontStyle bold
        
        ' Cantos arredondados
        RoundCorner 10
    }
    
    ' --- Configuração das Notas ---
    note {
        BackgroundColor #FFFFE0
        BorderColor #555555
    }
    
    ' --- Configuração dos Pacotes (Packages) ---
    package {
        BackgroundColor #F0F0F0
        BorderColor #AAAAAA
        BorderThickness 1
        FontStyle bold
    }
}

' --- Parâmetros de Layout ---
' Usa linhas ortogonais (retas) para um visual mais limpo
skinparam linetype ortho

' Oculta ícones de visibilidade de atributos e membros vazios
skinparam classAttributeIconSize 0
hide empty members

class Cano {
    - bitola: float
    - tempoMiliseg: int
    - vazao: float
    - isAr: bool

    + getBitola(): float
    + getVazao(): float
    + getTempoMiliseg(): int
    + getIsAr(): Bool
    + setVazao(vazao: float): void
    + setIsAr(isAr: bool): void
}

class Display {
    - caminhoImagemBase: string
    - nomeJanela: string

    + gerarImagem(consumo: string): frame
    + exibirImagem(frame: frame, tempo: int): void
    + salvarImagemJpeg(frame: frame, caminho: string): void
}

class Hidrometro {
    - entrada: Cano
    - saida: Cano
    - volumeMax: int
    - consumo: float
    - perdaAr: float
    - dezenasLitros: int
    - centenasLitros: int
    - volume: int

    + getConsumo(): int
    + getEntrada(): Cano
    + getDezenasLitros(): int
    + getCentenasLitros(): int
    + getVolume(): int
    + medir(): void
}

class Controlador {
    - intervaloImagem: int
    - hidrometro: Hidrometro
    - display: Display
    - parar: bool

    - gerarVazaoAleatoria(): float
    - gerarArAleatorio: bool
    - consumoFormatado: string
    - controlar(): void
    + iniciarControle(): void
    + pararControle(): void
    + exibicao(): void
}

'--- Relações ---
Hidrometro o-- Cano : entrada/saida
Controlador o-- Hidrometro : controla
Controlador o-- Display : controla

@enduml